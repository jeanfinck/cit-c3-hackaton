<?php
/**
 * @file
 * Implements a Q&A platform for CI&T collaborators.
 */

define('CONTRIBUTE_QUESTION_CONTENT_TYPE', 'question');
define('CONTRIBUTE_ANSWER_CONTENT_TYPE', 'answer');
define('CONTRIBUTE_VOTE_UP', 'up');
define('CONTRIBUTE_VOTE_DOWN', 'down');

module_load_include('inc', 'contribute', 'contribute.question');
module_load_include('inc', 'contribute', 'contribute.answer');
module_load_include('inc', 'contribute', 'contribute.comment');
module_load_include('inc', 'contribute', 'contribute.debug');
module_load_include('inc', 'contribute', 'gamification');

/**
 * Define menu items and page callbacks.
 *
 * @return array
 *   An array of menu items.
 */
function contribute_menu() {
  $items = array(
    'questions/ask' => array(
      'title' => 'Ask a Question',
      'access callback' => 'user_is_logged_in',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contribute_question_form'),
    ),
    'scores/%' => array(
      'title' => 'scores to a user',
      'access arguments' => array('access content'),
      'access callback' => TRUE,
      'page callback' => '_gimme_scores',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'post/answer/vote/%/%' => array(
      'title' => 'Add Votes in a Answer',
      'access arguments' => array('access content'),
      'page callback' => 'contribute_add_answer_vote',
      'page arguments' => array(3, 4),
      'type' => MENU_CALLBACK,
    ),
  );

  return $items;
}

/**
 * Define all blocks provided by the module.
 *
 * @return array
 *   An associative array whose keys define the delta for each
 *   block and whose values contain the block descriptions.
 */
function contribute_block_info() {
  // This example comes from node.module.
  $blocks['advice_accept'] = array(
    'info' => t('Accept advice'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'questions/ask/advice',
  );

  return $blocks;
}

/**
 * Return a rendered or renderable view of a block.
 *
 * @return array
 *   An array containing the following elements: subject and content.
 */
function contribute_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'advice_accept':
      $block['subject'] = t('');
      $block['content'] = drupal_get_form('contribute_advice_accept_form');
      break;
  }
  return $block;
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function contribute_preprocess_node(&$variables){
  if($variables['type'] == CONTRIBUTE_QUESTION_CONTENT_TYPE) {
    $question_nid = $variables['nid'];
    $variables['answers'] = contribute_get_answers_by_question_nid($question_nid);
    $variables['correct_answer'] = !empty($variables['field_select_answer'][0]['node']) ? $variables['field_select_answer'][0]['node'] : NULL;
  }
}

function contribute_node_insert($node) {
  switch ($node->type) {
    case 'question':
      $path = pathauto_create_alias('node', 'insert', 'node/' . $node->nid, array('node' => $node), $node->type);
      drupal_goto($path['alias']);
      break;
  }
}
