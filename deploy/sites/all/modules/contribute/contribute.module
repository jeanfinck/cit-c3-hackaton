<?php
/**
 * @file
 * Implements a Q&A platform for CI&T collaborators.
 */

// Constants
define('CONTRIBUTE_QUESTION_CONTENT_TYPE', 'question');
define('CONTRIBUTE_ANSWER_CONTENT_TYPE', 'answer');
define('CONTRIBUTE_COMMENT_CONTENT_TYPE', 'comment');
define('CONTRIBUTE_VOTE_UP', 'vote-up');
define('CONTRIBUTE_VOTE_DOWN', 'vote-down');
define('CONTRIBUTE_PREFIX_TITLE_ANSWER', 'ANSWER: Ref. ');
define('CONTRIBUTE_PREFIX_TITLE_COMMENT', 'COMMENT: Ref. ');
define('CONTRIBUTE_GAMIFICATION_UP_VOTE', 'upvote');
define('CONTRIBUTE_GAMIFICATION_DOWN_VOTE', 'downvote');
define('CONTRIBUTE_FIELD_ANSWER_QUESTION', 'field_answer_question');
define('CONTRIBUTE_VOTE_TYPE_ANSWER', 1);
define('CONTRIBUTE_ASK_ADVICE_PAGE_PATH', 'questions/ask/advice');
define('CONTRIBUTE_VOTES_JS_FILE', 'contribute.votes.js');
define('CONTRIBUTE_COMMENTS_JS_FILE', 'contribute.comments.js');

// Always include the required files
contribute_include_required_inc_files();

/**
 * Includes the '.inc' required files
 */
function contribute_include_required_inc_files() {
  $files = array(
    'contribute.common',
    'contribute.comment',
    'contribute.question',
    'contribute.answer',
    'contribute.debug',
    'contribute.vote',
    'contribute.gamification',
  );

  foreach ($files as $file) {
    module_load_include('inc', 'contribute', 'inc/' . $file);
  }
}

/**
 * Define menu items and page callbacks.
 *
 * @return array
 *   An array of menu items.
 */
function contribute_menu() {
  $items = array(
    'questions/ask' => array(
      'title' => 'Ask a Question',
      'access callback' => 'user_is_logged_in',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contribute_question_form'),
    ),
    'scores/%' => array(
      'title' => 'scores to a user',
      'access arguments' => array('access content'),
      'access callback' => TRUE,
      'page callback' => 'contribute_gimme_scores',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'post/answer/vote/%/%/%' => array(
      'title' => 'Add Votes in a Answer',
      'access arguments' => array('access content'),
      'page callback' => 'contribute_answer_vote_callback',
      'page arguments' => array(3, 4, 5),
      'type' => MENU_CALLBACK,
    ),
    'post/answer/best/%/%' => array(
      'title' => 'Defines the best answer',
      'access arguments' => array('access content'),
      'page callback' => 'contribute_select_best_answer_to_question_callback',
      'page arguments' => array(3, 4),
      'type' => MENU_CALLBACK,
    ),
  );

  return $items;
}

/**
 * Define all blocks provided by the module.
 *
 * @return array
 *   An associative array whose keys define the delta for each
 *   block and whose values contain the block descriptions.
 */
function contribute_block_info() {
  $blocks['advice_accept'] = array(
    'info' => t('Accept advice'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => CONTRIBUTE_ASK_ADVICE_PAGE_PATH,
  );

  return $blocks;
}

/**
 * Return a rendered or renderable view of a block.
 *
 * @return array
 *   An array containing the following elements: subject and content.
 */
function contribute_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'advice_accept':
      $block['subject'] = '';
      $block['content'] = drupal_get_form('contribute_advice_accept_form');
      break;
  }

  return $block;
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function contribute_preprocess_node(&$variables){
  // Select the answers by the current question
  if($variables['type'] == CONTRIBUTE_QUESTION_CONTENT_TYPE) {
    $question_nid = $variables['nid'];

    // Add Scripts
    drupal_add_js(drupal_get_path('module', 'contribute') . '/js/' . CONTRIBUTE_VOTES_JS_FILE);
    drupal_add_js(drupal_get_path('module', 'contribute') . '/js/' . CONTRIBUTE_COMMENTS_JS_FILE);

    // Add question node id to js scope.
    drupal_add_js(array('contribute' => array('questionNid' => $question_nid)), 'setting');

    // Add all answers related to this question.
    $variables['answers'] = contribute_get_answers_by_question_nid($question_nid);
  }
}

/**
 * Implementation of hook_node_load().
 *
 * @param array $nodes
 * @param array $types
 */
function contribute_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {

    switch ($node->type) {
      case CONTRIBUTE_QUESTION_CONTENT_TYPE:
        // Adds data info in question nodes
        // Info: Author details
        $node->author_details = user_load($node->uid);
        break;

      case CONTRIBUTE_ANSWER_CONTENT_TYPE:
        // Adds data info in answer nodes
        // Info: Current user already voted
        $user_id = contribute_get_current_user_id();
        $node->current_user_already_voted = contribute_user_already_voted_for_node($user_id, $node->nid, CONTRIBUTE_VOTE_TYPE_ANSWER);

        // Info: Votes
        $node->total_votes = contribute_get_total_node_votes($node->nid);

        // Info: User comments
        $node->comments = contribute_get_comments_by_answer($node->nid);

        // Info: Author details
        $node->author_details = user_load($node->uid);
        break;
    }
  }
}

/**
 * Implementation of hook_node_insert().
 *
 * @param object $node
 */
function contribute_node_insert($node) {
  switch ($node->type) {
    case CONTRIBUTE_QUESTION_CONTENT_TYPE:
      module_load_include('inc', 'pathauto');
      $path = pathauto_create_alias('node', 'insert', 'node/' . $node->nid, array('node' => $node), $node->type);
      drupal_goto($path['alias']);
      break;
  }
}

/**
 * Implementation of hook_user_login().
 */
function contribute_user_login(&$edit, $account) {
  drupal_goto('questions');
}

/**
 * Implementation of hook_init().
 */
function contribute_init() {
  contribute_add_gritter_plugin();
  drupal_add_library('system', 'ui.dialog');

  switch (drupal_get_path_alias($_GET['q'])) {
    case 'questions':
    case 'questions/unanswered':
      contribute_timeago_add_js();
      break;
  }
}
