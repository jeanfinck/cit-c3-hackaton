<?php
/**
 * @file
 * Implements a Q&A platform for CI&T collaborators.
 */

define('CONTRIBUTE_QUESTION_CONTENT_TYPE', 'question');
define('CONTRIBUTE_ANSWER_CONTENT_TYPE', 'answer');
define('CONTRIBUTE_VOTE_UP', 'up');
define('CONTRIBUTE_VOTE_DOWN', 'down');
define('CONTRIBUTE_PREFIX_TITLE_ANSWER', 'Answer to question node ');
define('CONTRIBUTE_GAMIFICATION_UP_VOTE', 'upvote');
define('CONTRIBUTE_GAMIFICATION_DOWN_VOTE', 'downvote');
define('CONTRIBUTE_FIELD_ANSWER_QUESTION', 'field_answer_question');
define('CONTRIBUTE_VOTE_TYPE_ANSWER', 1);

module_load_include('inc', 'contribute', 'contribute.question');
module_load_include('inc', 'contribute', 'contribute.answer');
module_load_include('inc', 'contribute', 'contribute.comment');
module_load_include('inc', 'contribute', 'contribute.debug');
module_load_include('inc', 'contribute', 'gamification');

/**
 * Define menu items and page callbacks.
 *
 * @return array
 *   An array of menu items.
 */
function contribute_menu() {
  $items = array(
    'questions/ask' => array(
      'title' => 'Ask a Question',
      'access callback' => 'user_is_logged_in',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contribute_question_form'),
    ),
    'scores/%' => array(
      'title' => 'scores to a user',
      'access arguments' => array('access content'),
      'access callback' => TRUE,
      'page callback' => '_gimme_scores',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'post/answer/vote/%/%/%' => array(
      'title' => 'Add Votes in a Answer',
      'access arguments' => array('access content'),
      'page callback' => 'contribute_answer_vote_callback',
      'page arguments' => array(3, 4, 5),
      'type' => MENU_CALLBACK,
    ),
  );

  return $items;
}

/**
 * Define all blocks provided by the module.
 *
 * @return array
 *   An associative array whose keys define the delta for each
 *   block and whose values contain the block descriptions.
 */
function contribute_block_info() {
  // This example comes from node.module.
  $blocks['advice_accept'] = array(
    'info' => t('Accept advice'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'questions/ask/advice',
  );

  return $blocks;
}

/**
 * Return a rendered or renderable view of a block.
 *
 * @return array
 *   An array containing the following elements: subject and content.
 */
function contribute_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'advice_accept':
      $block['subject'] = t('');
      $block['content'] = drupal_get_form('contribute_advice_accept_form');
      break;
  }
  return $block;
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function contribute_preprocess_node(&$variables){
  if($variables['type'] == CONTRIBUTE_QUESTION_CONTENT_TYPE) {
    // Select the answers by the current question
    $question_nid = $variables['nid'];
    drupal_add_js(array('contribute' => array('questionNid' => $question_nid)), 'setting');
    $variables['answers'] = contribute_get_answers_by_question_nid($question_nid);
    $variables['correct_answer'] = !empty($variables['field_select_answer'][0]['node']) ? $variables['field_select_answer'][0]['node'] : NULL;
  }
}

/**
 * Implementation of hook_node_load().
 *
 * @param array $nodes
 * @param array $types
 */
function contribute_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {

    switch ($node->type) {
      case CONTRIBUTE_QUESTION_CONTENT_TYPE:
        // Adds data info in question nodes
        // Info: Author details
        $node->author_details = user_load($node->uid);
        break;

      case CONTRIBUTE_ANSWER_CONTENT_TYPE:
        // Adds data info in answer nodes
        // Info: Current user already voted
        $user_id = contribute_get_current_user_id();
        $already_voted = contribute_user_already_voted_for_node($user_id, $node->nid, CONTRIBUTE_VOTE_TYPE_ANSWER);
        $node->current_user_already_voted = $already_voted;

        // Info: Votes
        $node->total_votes = contribute_get_total_node_votes($node->nid);

        // Info: Author details
        $node->author_details = user_load($node->uid);
        break;
    }
  }
}

function contribute_node_insert($node) {
  switch ($node->type) {
    case 'question':
      module_load_include('inc', 'pathauto');
      $path = pathauto_create_alias('node', 'insert', 'node/' . $node->nid, array('node' => $node), $node->type);
      drupal_goto($path['alias']);
      break;
  }
}

function contribute_user_login(&$edit, $account) {
  drupal_goto('questions');
}


/**
 * Overrides the default translation of Timeago dates if necessary.
 */
function contribute_timeago_add_js() {
  $library_path = libraries_get_path('timeago');
  $path = $library_path . '/jquery.timeago.' . $GLOBALS['language']->language . '.js';

  if (file_exists($path)) {
    drupal_add_js($path, array('scope' => 'footer'));
    drupal_add_js($library_path . '/timeago.js', array('scope' => 'footer'));
  }
}

/**
 * Implements gritter plugin behavior
 *
 * Gritter is a notification bubble/popup that appears in the top right of the page.
 */
function contribute_add_gritter_plugin() {
  $gritter_library_path = libraries_get_path('gritter');

  if ($gritter_library_path) {
    drupal_add_js($gritter_library_path . '/js/jquery.gritter.min.js');
    drupal_add_css($gritter_library_path . '/css/jquery.gritter.css');
  }
}

function contribute_init() {
  contribute_add_gritter_plugin();

  switch (drupal_get_path_alias($_GET['q'])) {
    case 'questions':
    case 'questions/unanswered':
      contribute_timeago_add_js();
      break;
  }
}
